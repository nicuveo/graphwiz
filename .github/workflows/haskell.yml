name: validation

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Generates a list of files to analyze. The output depends on the type of event:
  #   - for a push request, this is the list of modified files;
  #   - for a pushe, it's all Haskell files in the repo.
  # There are two outputs to this job:
  #   - haskell-files-text: a string in which files are separated by a space
  #   - haskell-files-json: a string that represents a JSON array of file-names
  generate-file-list:
    name: "generate: haskell file list"
    runs-on: ubuntu-latest
    outputs:
      haskell-files-text: ${{ steps[format('{0}-files', github.event_name)].outputs.text }}
      haskell-files-json: ${{ steps[format('{0}-files', github.event_name)].outputs.json }}
    steps:
      - uses: actions/checkout@v4
      - id: pr_changed_files
        if: ${{ github.event_name == 'pull_request' }}
        uses: tj-actions/changed-files@v45
        with:
          files: "**/*.hs"
      - name: Export haskell files
        id: pull_request-files
        if: ${{ github.event_name == 'pull_request' }}
        env:
          FILES: "${{ steps.pr_changed_files.outputs.all_changed_and_modified_files }}"
        run: |
          echo "text=$FILES" | tee -a "$GITHUB_OUTPUT"
          echo "json=$(jq -c --null-input --arg str "$FILES" '$str | split(" ")')" | tee -a "$GITHUB_OUTPUT"
      - name: Export haskell files
        id: push-files
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "text=$(git ls-files '*.hs' '*.hs-boot' | tr '\n' ' ')" | tee -a "$GITHUB_OUTPUT"
          echo "json=$(jq -c --null-input --arg str "$(git ls-files '*.hs')" '$str | split("\n")')" | tee -a "$GITHUB_OUTPUT"

  # Generates a matrix of versions to test from the project's cabal file
  generate-matrix:
    name: "generate: test matrix"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Extract GHC versions
        id: set-matrix
        uses: kleidukos/get-tested@v0.1.7.1
        with:
          cabal-file: graphwiz.cabal
          ubuntu-version: latest
          macos-version: latest
          version: 0.1.7.1

  # Runs linters on the code.
  # In the case of a pull-request, only lint modified files.
  check-lint:
    name: "check: lint"
    runs-on: ubuntu-latest
    needs: generate-file-list
    if: needs.generate-file-list.outputs.haskell-files-text
    steps:
      - uses: actions/checkout@v4
      - uses: haskell-actions/hlint-setup@v2
      - uses: haskell-actions/hlint-run@v2
        with:
          path: ${{ needs.generate-file-list.outputs.haskell-files-json }}
          fail-on: warning

  # Check formatting.
  # In the case of a pull-request, only check modified files.
  check-format:
    name: "check: format"
    runs-on: ubuntu-latest
    needs: generate-file-list
    if: needs.generate-file-list.outputs.haskell-files-text
    steps:
      - uses: actions/checkout@v4
      - name: "Run stylish-haskell"
        env:
          TARGETS: ${{ needs.generate-file-list.outputs.haskell-files-text }}
        run: |
          curl -sL https://raw.github.com/haskell/stylish-haskell/main/scripts/latest.sh | sh -s -- --inplace $TARGETS
          for f in $(git diff --name-only --diff-filter=M); do
            echo "::error file=$f::File is not formatted properly."
          done

  # Builds the code, builds the documentation, runs the test.
  build:
    name: "build: ${{ matrix.ghc }} on ${{ matrix.os }}"
    needs: [generate-matrix, check-lint, check-format]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: "setup: checkout"
        uses: actions/checkout@v4

      - name: "setup: install"
        uses: haskell-actions/setup@v2
        id: setup
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: 'latest'
          cabal-update: true

      - name: "setup: configure"
        run: |
          echo "REPORT_NAME=report-${{ runner.os }}-ghc-${{ matrix.ghc }}.xml" >> $GITHUB_ENV
          cabal build --dry-run

      - name: "check: cabal"
        run: cabal check

      - name: "setup: cache"
        uses: actions/cache@v4
        id: cache
        env:
          key-base: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: |
            ${{ steps.setup.outputs.cabal-store }}
            dist-newstyle
          key: ${{ env.key-base }}-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key-base }}-

      - name: "build: dependencies"
        run: cabal build all --only-dependencies

      - name: "build: project"
        run: cabal build all

      - name: "build: documentation"
        run: cabal haddock all

      - name: "check: tests"
        run: cabal test --test-options "--xml=${{ env.REPORT_NAME }}" all
        id: tests

      - name: "cleanup: upload tests"
        uses: actions/upload-artifact@v4
        if: steps.tests.outcome != 'cancelled'
        with:
          name: ${{ env.REPORT_NAME }}
          path: ${{ env.REPORT_NAME }}

  # Publish relevant findings
  publish-test-report:
    name: "publish: test report"
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: build
    steps:
      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          pattern: report-*
          merge-multiple: true
      - name: Merge reports
        id: merge_reports
        run: |
          if test -r *.xml; then
              pip install junitparser==3.2.0
              junitparser merge --glob *.xml final-report.xml
              echo "results:true" >> "$GITHUB_OUTPUT"
          fi
      - uses: mikepenz/action-junit-report@v5
        if: steps.merge_reports.output.results
        with:
          annotate_only: true
          check_name: 'Haskell test suite'
          report_paths: 'final-report.xml'
